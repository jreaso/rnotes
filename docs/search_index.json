[["index.html", "R Notes Resources", " R Notes Jamie Reason 2022-23 Resources These are personal notes on R mainly for reference, written over the course of two modules taken at university, MLLN (Machine Learning and Neural Networks) (2022-23) DSSC (Data Science and Statistical Computing) (2021-22) Although, this current version is more focused on the content for the MLLN module. These are heavily based off the notes of the respective courses (see links below) and I do not take credit. There may still be mistakes and inaccuracies from myself. R Seek Search Engine Cheat Sheets MLNN Course Notes DSSC Course Notes "],["r-basics.html", "Chapter 1 R Basics 1.1 Vectors 1.2 Data Frames 1.3 Lists 1.4 Data Types 1.5 Other", " Chapter 1 R Basics 1.1 Vectors 1.1.1 Creating Vectors # basic vector v &lt;- c(2,3,8,5) #repeated values rep(c(1,2),5) #sequence seq(4,7) #inclusive, and by default counts by 1 #shorthand 4:7 #custom length or increments seq(0, 10, by = 2) seq(0, 3, length.out = 7) 1.1.2 Accessing Vectors myData &lt;- c(2,3,8,5) #element wise myData[2] #selects second entry myData[-3] #excludes third element #can also pass in vectors to index it myData[c(1,4)] myData[2:4] 1.1.3 Vector Functions Essential Functions mean() sd() var() max() min() median() range() quantile() cumsum() sum() Other Functions sort() - sorts a vector (alphabetically or by increasing size when numerical) rank() - provides the rank of each element order() - gives the indices of the elements in order unique() - returns just the unique values in the vector length() - total number of elements in the vector paste() - makes each element in the vector a string Particularly Interesting Functions sample() - randomly sample from the elements of a vector sample(c(3,7,9,23,45), 3, replace = FALSE) #sample from vector, choosing n=3 without replacement table() - provide counts of the occurrence of each element table(sample(1:6, 200, replace = TRUE)) is.na() - gives a TRUE/FALSE vector as the output checking is an entry is NA 1.2 Data Frames Structure and viewing data frames To show a structure of a variable, dataframe, list etc, run str(x). View(mydata) to see in spreadsheet view 1.2.1 Creating Data Frames Manually hw &lt;- data.frame(Height = c(147, 150, 152), Weight = c(52.2, 53.1, 54.4)) Load from *.csv file If in working directory, hw &lt;- read.csv(&quot;hw.csv&quot;) Can also use RStudio “Import Dataset” button in Environment tab (top left) Built in Data Sets Can use data frames built into R, for example: data(&quot;cars&quot;) Run data() to see all data sets 1.2.2 Accessing Data Frames Single column (alternative ways): will collapse Data Frame column into vector hw$Height hw[,1] keeps data frame structure only keeping 1 column hw[,1, drop = FALSE] Single element: hw$Height[3] or hw[3,1] Single row: hw[3,] (similar to single column) Full access df[ r , c ] r can be empty, integer between 1 and number of row, vector of integers or a vector of TRUE/FALSE of length num rows (must be exact length). c can be empty, integer between 1 and number of row, vector of integers, a vector of TRUE/FALSE of length num rows (must be exact length) or vector of strings with column/variable names. Examples (first 3 equivalent) wq.red$ph wq.red[, 9] wq.red[, &quot;pH&quot;] wq.red[, c(9,11)] wq.red[, c(&quot;pH&quot;,&quot;alcohol&quot;)] 1.2.2.1 Advanced Query - Accessing a Subset of a Data Frame Examples Entire column “Weight” with values &gt;50 hw[hw$Weight&gt;50,] Both columns, 4 random rows (using sample()) hw[sample(1:nrow(hw), 4),] -Removing NA values movies[!is.na(movies$budget),] #doesn&#39;t have any NA value Note: ! is the logical NOT operator and is.na() is a function that acts on a vector giving a TRUE/FALSE vector as the output extra example wq.red[wq.red$pH&gt;3 &amp; wq.red$density&lt;1, &quot;alcohol&quot;] #wq.red$pH&gt;3 is a vector of TRUE/FALSE #wq.red$density&lt;3 is a vector of TRUE/FALSE #&amp; takes logical between two vectors 1.2.3 Interrogating Data Frames Data Frame Functions - information names() - column names dim() - number of rows and columns nrow() - number of rows ncol() - number of columns head() - useful for large data, just shows top rows (can add extra parameter to specify how many rows show up) str() - shows details about type of data Data Frame Functions - interesting data colMeans() rowMeans() colSums() rowSums() cov() - covariance matrix cor() - correlation matrix scale() - scales data to be centered at 0 and scaled (both have optional arguments available) summary() - gives all major statistics for each variable (column) Data Frame (column/row) Functions - sorting and ordering (optional decreasing = TRUE argument) `sort(my.data$var) - sorts a variable but only outputs that column vector sorted `order(my.data$var) - outputs a list of indices sorted Sorting a Data Frame by a Column my.data[order(my.data$var),] - sorts whole data frame according to var column 1.2.4 Manipulating Data Frames Creating/Adding Variables to a Data Frame Reference a variable that doesn’t exist and just assign it to something. For example, hw$BMI &lt;- hw$Weight/(hw$Height/100)^2 1.2.4.1 Merging Data Frames rbind(,) and cbind(,) Note: can be very error prone and often better to use tidyverse (unless with rbind variables are identical and in same order or with cbind, observations are in same order) rbind() pastes rows together (above/below) cbind() pastes columns together (left/right) For an example with rbind(,), if two data frames have same column names, rbind(,) will stack the rows to make one data frame. As an example, test1 &lt;- data.frame(Col1 = c(1,5,9,2), Col2 = c(6,9,8,3)) test2 &lt;- data.frame(Col2 = c(5,9,0,1), Col1 = c(4,9,3,0)) rbind(test1, test2) ## Col1 Col2 ## 1 1 6 ## 2 5 9 ## 3 9 8 ## 4 2 3 ## 5 4 5 ## 6 9 9 ## 7 3 0 ## 8 0 1 (notice how the columns were matched by name not order) 1.2.5 Missing Data in Data Frames 1.2.5.1 Importing Data with Missing Values When using read.csv(\"mydata.csv\"), can add the additional argument na.strings=c(...) to set any strings in the vector to be replaced by &lt;NA&gt;. As an example, read.csv(&quot;carsdata.csv&quot;, na.strings = c(&quot;&quot;, &quot;na&quot;)) would import the cardata.csv file as a data frame with all strings that are empty \"\" or \"na\" with the approptiate &lt;NA&gt; tag. Ignoring NA values - na.rm = TRUE na.rm = TRUE argument ignores all &lt;NA&gt; values when performing the function. As an example, mean(mydata$var, na.rm = TRUE) which is equivalent to mean(na.omit(mydata$var)) 1.2.5.2 Remove Ovservations with &lt;NA&gt; Entry (na.omit()) Example, na.omit(chickwts$weight) 1.3 Lists x &lt;- list(1, &quot;a&quot;, c(1,2,3), data.frame(a = 1:3, b = 4:6)) can have a list of any type of variable can be good for hierarchical and tree structures, Nesting is permitted (i.e. lists can contain lists) variables in the list can also be named x &lt;- list(bob = 1, jill = &quot;a&quot;, jack = c(1,2,3), eve = data.frame(a = 1:3, b = 4:6)) x$eve$a ## [1] 1 2 3 1.3.1 Accessing lists x[] #accesses an element of a list (returns a list of one element) x[[]] #strips away one level of hierarchy, list structure is gone x$bob #equivalent to above when items in list are named 1.4 Data Types Numeric Logical (TRUE/FALSE) Categorical (called factors in R), could be ordered (e.g. credit rating) or could not be (e.g. eye colour) Date/Time Text or String Others (e.g. image, spatial, audio, video) 1.4.1 Categorical Data (Factors) 1.4.1.1 Making Data Frames Categorical R cannot tell the difference between factors and strings when importing data frames, so we must “tidy” them up after importing Cleaning up a data frame (all non-numeric by default get imported as strings) by making all strings in one variable a factor eyesDF &lt;- data.frame(name=c(&quot;anne&quot;,&quot;john&quot;,&quot;charlie&quot;,&quot;sarah&quot;,&quot;max&quot;,&quot;ellie&quot;,&quot;eve&quot;), eyeColour=c(&quot;blue&quot;,&quot;green&quot;,&quot;brown&quot;,&quot;brown&quot;,&quot;blue&quot;,&quot;blue&quot;,&quot;brown&quot;)) #changes a variable to be categorical (a factor) eyesDF$eyeColour &lt;- as.factor(eyesDF$eyeColour) summary(eyesDF$eyeColour) ## blue brown green ## 3 3 1 Treat data as a factor or a text? Treat as text not factor when every observation is unique (e.g. surname) When some text is coming up very often it may be more appropriate as a factor 1.4.1.2 Making Vectors Categorical We can create a vector with factors in by creating the entries as strings and then applying the factor() function For example, eye.colour &lt;- factor(c(&quot;blue&quot;,&quot;brown&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;blue&quot;,&quot;brown&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;blue&quot;,&quot;brown&quot;,&quot;green&quot;,&quot;brown&quot;,&quot;brown&quot;,&quot;green&quot;)) summary(eye.colour) ## blue brown green ## 8 5 6 Example Using Factors The following data frame has a factor variable (feed) data(&quot;chickwts&quot;) head(chickwts) ## weight feed ## 1 179 horsebean ## 2 160 horsebean ## 3 136 horsebean ## 4 227 horsebean ## 5 217 horsebean ## 6 168 horsebean summary(chickwts) ## weight feed ## Min. :108.0 casein :12 ## 1st Qu.:204.5 horsebean:10 ## Median :258.0 linseed :12 ## Mean :261.3 meatmeal :11 ## 3rd Qu.:323.5 soybean :14 ## Max. :423.0 sunflower:12 We can filter out specific factors, chickwts[chickwts$feed %in% c(&quot;sunflower&quot;,&quot;linseed&quot;),] Number of levels (different factors) and names of levels nlevels(chickwts$feed) ## [1] 6 levels(chickwts$feed) ## [1] &quot;casein&quot; &quot;horsebean&quot; &quot;linseed&quot; &quot;meatmeal&quot; &quot;soybean&quot; &quot;sunflower&quot; unclass() gives each entry a number corresponding to a factor unclass(chickwts$feed) ## [1] 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 ## [39] 6 6 6 6 6 6 6 6 6 6 4 4 4 4 4 4 4 4 4 4 4 1 1 1 1 1 1 1 1 1 1 1 1 ## attr(,&quot;levels&quot;) ## [1] &quot;casein&quot; &quot;horsebean&quot; &quot;linseed&quot; &quot;meatmeal&quot; &quot;soybean&quot; &quot;sunflower&quot; 1.5 Other Packages Installing a package: install.packages(\"dplyr\") Loading a package: library(\"dplyr\") Loops for(i in x) { #i iterates over the values in vector x } Functions myFunction &lt;- function(arg1, arg2 = 1) { ... return(...) } Functions acting on vectors - sapply() sapply(X, Fun) Applies function Fun to vector X element-wise Logical Operators Logical operators act element-wise on pairs of vectors (of same size) of TRUE and FALSE values. AND is &amp;, OR is |. "],["plotting.html", "Chapter 2 Plotting 2.1 Plotting in Base R 2.2 Plotting in ggplot2", " Chapter 2 Plotting 2.1 Plotting in Base R (useful for exploration of data) 2.1.1 Core Plot Function Plots data x against data y. (if only x is supplied, the indices will be plotted against their values) plot(x,y, ...) Optional Arguments col - colour of points (can use RGB or colour name as a string; can be vector for each point) pch - plotting symbol (cross, circle etc), an integer Plotting symbol reference xlab and ylab - labels xlim and ylim - limits in the form of a 2-vector (e.g. xlim = c(20,100) restricts x from 20 to 100) main - Plot Title type \"p\" - points (default) \"l\" - line connecting observations \"b\" - both points and lines 2.1.2 Other Plot Functions hist() - Histogram boxplot() - Boxplot barplot() - Categorical Bar Charts (use table to get summary) Note: you can store plots inside of variables data(&quot;diamonds&quot;, package = &quot;ggplot2&quot;) hgram &lt;- hist(diamonds$price, freq = FALSE) str(hgram) ## List of 6 ## $ breaks : num [1:20] 0 1000 2000 3000 4000 5000 6000 7000 8000 9000 ... ## $ counts : int [1:19] 14524 9683 6129 4225 4665 3163 2278 1668 1307 1076 ... ## $ density : num [1:19] 2.69e-04 1.80e-04 1.14e-04 7.83e-05 8.65e-05 ... ## $ mids : num [1:19] 500 1500 2500 3500 4500 5500 6500 7500 8500 9500 ... ## $ xname : chr &quot;diamonds$price&quot; ## $ equidist: logi TRUE ## - attr(*, &quot;class&quot;)= chr &quot;histogram&quot; 2.1.3 Adding to Plots Each plot() function creates a new plot. To add to an existing plot use, points() - adds a plot of points to an existing plot lines() - shorthand for points(x, y, type=\"l\") abline() - adds a \\(y=mx+c\\) line directly 2.1.3.1 Fitting Lines to Plots (see linear regression) lm() - fits a straight line, pass inside of abline() lowess() - fits a smooth line, pass inside of lines() (f argument controls smoothness) density() - fits a smooth continuous version of a histogram Example data(&quot;diamonds&quot;, package = &quot;ggplot2&quot;) plot(diamonds$carat, diamonds$price, pch = 20) abline(lm(price ~ carat, diamonds), col = &quot;red&quot;) lines(lowess(diamonds$carat, diamonds$price, f = 0.05), col = &quot;green&quot;) hist(diamonds$price, freq = FALSE) lines(density(diamonds$price), col = &quot;red&quot;) 2.1.4 Multiple Plots (often better to just use ggplot2) To get a grid of all pairwise scatter plots, use pairs() pairs(mtcars) pairs(mtcars[,1:4]) You can also manually set the grid size (using par(mfrow = c(n,m))) and then populate each grid slot one by one by calling slots par(mfrow = c(2,1)) plot(diamonds$carat, diamonds$price) boxplot(diamonds$carat) par(mfrow = c(1,1)) # &lt;- need this to reset to a single plot! 2.2 Plotting in ggplot2 (useful for presentation of data) Loading ggplot2, # Either ... library(&quot;tidyverse&quot;) # for all tidyverse packages # OR, for just plotting library(&quot;ggplot2&quot;) 2.2.1 Main Structure Starting a plot Every plot starts with the function ggplot() with the optional arguments: data - to specify the data frame containing the variables we later reference aes() - mapping to specify what variables map to the x axis, y axis, colour legend, etc For example, ## Warning: package &#39;tidyverse&#39; was built under R version 4.1.2 ## Warning: package &#39;ggplot2&#39; was built under R version 4.1.2 ## Warning: package &#39;tibble&#39; was built under R version 4.1.2 ## Warning: package &#39;tidyr&#39; was built under R version 4.1.2 ## Warning: package &#39;readr&#39; was built under R version 4.1.2 ## Warning: package &#39;purrr&#39; was built under R version 4.1.2 ## Warning: package &#39;dplyr&#39; was built under R version 4.1.2 ## Warning: package &#39;stringr&#39; was built under R version 4.1.2 ## Warning: package &#39;forcats&#39; was built under R version 4.1.2 ggplot(diamonds, aes(x = carat, y = price)) Axis are labelled and scaled but nothing is plotted yet (as we have not called a “Geom”). Geoms A geom_ will add a layer to the plot. Examples of Geoms: geom_point() - most basic, plots x against y as scatter plot geom_line() geom_smooth() - smoothed curve (defaukt method is “gam”, can also use “lm”) geom_bar() - barchart (1 variable and counts) geom_col() - barchart (2 variables) geom_boxplot() - boxplot More unusual ones, geom_hex() geom_polygon() aes() If you want to specify the x and y variables, colour by a property, group by a property, change the point size based on a property etc then you put that information into the aes(). The aes(...) that goes into the original ggplot(aes()) will be inherited by all plots unless overridden. The aes(...) that goes into a particular geom, geom_...(aes()) only applies to that geom. Labels xlab(\"X-axis Label\"), ylab(\"Y-axis Label\") and ggtitle(\"Title\") can also be added to the plot in the same way as Geoms. Alternativily, use + labs(title=\"Title\", x=\"X-axis\", y=\"Y-axis\") 2.2.2 Updating a Plot (Plots in Variables) data(&quot;mtcars&quot;) p &lt;- ggplot(mtcars, aes(x = hp, y = mpg)) + geom_point() p + geom_smooth() p + geom_smooth(method = &quot;lm&quot;) p + scale_y_log10() + scale_x_log10() + geom_smooth(method = &quot;lm&quot;) p + scale_y_log10() + scale_x_log10() + geom_smooth(method = &quot;lm&quot;) + geom_vline(xintercept = 100) Here, p stores the basic plot and each time, something different is added to it for a new plot, but without updating p. 2.2.3 Faceting Faceting enables splitting your data into multiple plots according to a categorical variable. facet_wrap() - a single variable split formula notation to indicate splitting variable ~ var optionally specify number of rows facet_grid() - two variable split formula indicating both splitting variables rows_var ~ cols_var formula indicating both splitting variables rows_var ~ cols_var For example, ggplot(mtcars, aes(x = hp, y = mpg)) + facet_wrap(~ gear) + geom_point() ggplot(mtcars, aes(x = hp, y = mpg)) + facet_grid(cyl ~ gear) + geom_point() 2.2.4 Examples ggplot(diamonds, aes(x = carat, y = price)) + geom_point(aes(colour = cut), size = 0.2) + geom_smooth(aes(colour = cut)) + xlab(&quot;Number of carats&quot;) + ylab(&quot;Price in $&quot;) ggplot(mpg, aes(x=displ, y=hwy)) + geom_point(aes(colour = class)) ggplot(mpg, aes(x=displ, y=hwy)) + facet_wrap(~class) + geom_point() + geom_point(aes(y=cty), colour=&quot;red&quot;) + #aes() doesn&#39;t hold all information!!! ylab(&quot;Fuel efficiency&quot;) ggplot(mpg, aes(x=displ, y=hwy)) + geom_point(aes(colour=drv)) + geom_smooth(colour=&quot;black&quot;) + geom_smooth(aes(colour=drv)) ggplot(mpg, aes(x=class)) + geom_bar(aes(fill=drv)) "],["simple-linear-regression-models.html", "Chapter 3 Simple Linear Regression Models 3.1 Building an SLR Model 3.2 Plotting an SLR Model 3.3 Diagnostic Plots and Residual Analysis 3.4 Transforming Regression Variables 3.5 Confidence and Prediction Intervals Misc", " Chapter 3 Simple Linear Regression Models 3.1 Building an SLR Model lm stands for Linear Model and is the function used for Linear Regression model &lt;- lm(Y ~ X, data) Practical 1 Example data(faithful) model &lt;- lm(waiting ~ eruptions, faithful) summary(model) ## ## Call: ## lm(formula = waiting ~ eruptions, data = faithful) ## ## Residuals: ## Min 1Q Median 3Q Max ## -12.0796 -4.4831 0.2122 3.9246 15.9719 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 33.4744 1.1549 28.98 &lt;2e-16 *** ## eruptions 10.7296 0.3148 34.09 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 5.914 on 270 degrees of freedom ## Multiple R-squared: 0.8115, Adjusted R-squared: 0.8108 ## F-statistic: 1162 on 1 and 270 DF, p-value: &lt; 2.2e-16 Useful functions to extract data from model: summ &lt;- summary(model) coef(model) gives coefficients fitted(model) returns the vector of the fitted values, \\(\\hat{y}_i = b_0 + b_1 x_i\\) resid(model) (or summ$residuals) returns vector of residuals, \\(e_i = y_i - \\hat{y}_i\\) summ$coefficients gives more information on coefficient estimates (standard error, t-statistic, corresponding two-sided p-value) summ$sigma extracts regression standard error summ$r.squared returns value of \\(R^2\\) 3.2 Plotting an SLR Model Using Base R plot(faithful$waiting ~ faithful$eruptions, xlab=&quot;Eruption Time (m)&quot;, ylab=&quot;Waiting Time Between Eruptions (m)&quot;, pch=16, col=&quot;cornflowerblue&quot;) abline(model, col=&quot;red&quot;) Using ggplot ggplot(faithful, aes(x=eruptions, y=waiting)) + geom_point() + geom_smooth(method=lm, formula = y~x, se=FALSE) geom_smooth Documentaion 3.3 Diagnostic Plots and Residual Analysis Infant Mortality and GDP Example from MLLN Notes Section 3.3 model1 &lt;- fit&lt;- lm(infantMortality ~ ppgdp, data=newUN) plot(newUN$infantMortality ~ newUN$ppgdp, xlab=&quot;GDP per Capita&quot;, ylab=&quot;Infant mortality (per 1000 births)&quot;, pch=16, col=&quot;cornflowerblue&quot;, main=&quot;Model 1&quot;) abline(model1,col=&quot;red&quot;) model2 &lt;- lm(log(infantMortality) ~ log(ppgdp), data=newUN) plot(log(newUN$infantMortality) ~ log(newUN$ppgdp), pch=16, col=&quot;cornflowerblue&quot;, main=&quot;Model 2&quot;) abline(model2,col=&quot;red&quot;) model1 clearly doesn’t fit SLR, we can confirm this be looking at diagnostic plots model2 which is a transformation fits better and is an example of good diagnostic plots Residual Plot plot(model1, which=1, pch=16, col=&quot;cornflowerblue&quot;, main=&quot;Model 1 Residual Plot&quot;) Comparison for Model 1 (poor fit) and Model 2 (good fit) par(mfrow=c(1,2)) plot(model1, which=1, pch=16, col=&quot;cornflowerblue&quot;, main=&quot;Model 1 Residual Plot&quot;) plot(model2,which=1,pch=16,col=&quot;cornflowerblue&quot;, main=&quot;Model 2 Residual Plot&quot;) Example Using Simpler Methods (From Practical 1) model is as from Practical 1 par(mfrow=c(1,2)) plot(y = resid(model), x=fitted(model)) #residuals against fitted values plot(y = resid(model), x=d) #residuals against raw values Residual Q-Q Plot and Histogram Residual Q-Q Plot plot(model1, which=2, pch=16, col=&quot;cornflowerblue&quot;, main=&quot;Model 1 Q-Q Plot&quot;) Residual Histogram hist(resid(model1), col=&quot;cornflowerblue&quot;, main=&quot;Model 1 Residual Histogram&quot;) Comparison for Model 1 (poor fit) and Model 2 (good fit) par(mfrow=c(2,2)) # Model 1 (before transformation) plot(model1, which = 2,pch=16, col=&quot;cornflowerblue&quot;, main=&quot;Model 1 Q-Q&quot;) hist(resid(model1),col=&quot;cornflowerblue&quot;, main=&quot;Model 1 Resid Hist&quot;) # Model 2 (after transformation) plot(model2, which = 2, pch=16, col=&quot;hotpink3&quot;, main=&quot;Model 2 Q-Q&quot;) hist(resid(model2),col=&quot;hotpink3&quot;, main=&quot;Model 2 Resid Hist&quot;) Example Using Simpler Methods (From Practical 1) model is as from Practical 1 par(mfrow=c(1,2)) hist(resid(model)) qqnorm(resid(model)) 3.4 Transforming Regression Variables When a linear regression model doesn’t look like a good fit, it may be appropriate to transform one or both of the variables. Example Making Log transformation (for Y and X) transformed_model &lt;- lm(log(Y) ~ log(X), data) Example Making Polynomial Transformation transformed_model &lt;- lm(Y ~ I(X^2), data) # I() is a general wrapper Using ggplot Change the formula parameter in geom_smooth 3.5 Confidence and Prediction Intervals 3.5.1 Confidence Intervals Easiest to use confint() ** Example from Notes** carSales&lt;-data.frame(Price=c(85,103,70,82,89,98,66,95,169,70,48), Age=c(5,4,6,5,5,5,6,6,2,7,7)) reg &lt;- lm(Price ~ Age, carSales) confint(reg, level=0.95) #CI for parameters ## 2.5 % 97.5 % ## (Intercept) 160.99243 229.94451 ## Age -26.59419 -13.92833 Practical 1 Example Again, model is as from Practical 1 beta1hat &lt;- coef(model)[2] se.beta1 &lt;- summary(model)$coefficients[2,2] n &lt;- length(w) #The Confidence Interval is beta1hat + c(-1,1) * qt(0.975, n-2) * se.beta1 ## [1] 10.10996 11.34932 # or confint(model, level=0.95)[2,] ## 2.5 % 97.5 % ## 10.10996 11.34932 3.5.2 Prediction Intervals Easiest to use predict() Practical 1 confidence and prediction section Section 3.5 Practical 2 3.5.3 Plotting Confidence and Prediction Intervals Misc Pearson Correlation Coefficient (\\(r\\)) cor(A, B) measures linear relationship between A and B and \\(r = \\sqrt{R^2}\\) "],["multiple-linear-regression.html", "Chapter 4 Multiple Linear Regression", " Chapter 4 Multiple Linear Regression Section 3.6 Onward Practical 2 Transformations and specific selections Practical 3 "],["dssc---data-wrangling-presentation-and-applications.html", "Chapter 5 DSSC - Data Wrangling, Presentation and Applications 5.1 Data Wrangling with Tidyverse 5.2 Dynamic Documents and Interactive Dashboards 5.3 Dates 5.4 Strings and Regular Expressions 5.5 Probability Distributions", " Chapter 5 DSSC - Data Wrangling, Presentation and Applications 5.1 Data Wrangling with Tidyverse Loading tidyverse, library(&quot;tidyverse&quot;) 5.1.1 Tidy Form (tidyr) What is tidy data? each variable is in a column each observation is in a row each type of observational unit forms a table Moving to and from tidy data Problems (how data may violate tidy form) Data is too wide - one variable spread over multiple columns (use pivot_longer()) Data is too long - one observation spread along multiple rows (use pivot_wider()) pivot_longer() Makes Wide Data Longer The arguments are: Data Frame Columns to transform Name of the column where previous column names should go Name of the column where values from the column should go Example who_wide ## country y1999 y2000 ## 1 Afghanistan 745 2666 ## 2 Brazil 37737 80488 ## 3 China 212258 213766 pivot_longer(who_wide, c(`y1999`, `y2000`), names_to = &quot;year&quot;, values_to = &quot;cases&quot;) ## # A tibble: 6 × 3 ## country year cases ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Afghanistan y1999 745 ## 2 Afghanistan y2000 2666 ## 3 Brazil y1999 37737 ## 4 Brazil y2000 80488 ## 5 China y1999 212258 ## 6 China y2000 213766 pivot_wider() Makes Long Data Wider The arguments are: Data Frame Columns to transform Name of the column where column names should come from Name of the column where values should come from Example who_long ## country year type count ## 1 Afghanistan 1999 cases 745 ## 2 Afghanistan 1999 population 19987071 ## 3 Afghanistan 2000 cases 2666 ## 4 Afghanistan 2000 population 20595360 ## 5 Brazil 1999 cases 37737 ## 6 Brazil 1999 population 172006362 ## 7 Brazil 2000 cases 80488 ## 8 Brazil 2000 population 174504898 ## 9 China 1999 cases 212258 ## 10 China 1999 population 1272915272 ## 11 China 2000 cases 213766 ## 12 China 2000 population 1280428583 pivot_wider(who_long, names_from = &quot;type&quot;, values_from = &quot;count&quot;) ## # A tibble: 6 × 4 ## country year cases population ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Afghanistan 1999 745 19987071 ## 2 Afghanistan 2000 2666 20595360 ## 3 Brazil 1999 37737 172006362 ## 4 Brazil 2000 80488 174504898 ## 5 China 1999 212258 1272915272 ## 6 China 2000 213766 1280428583 Additional Example - DSSC Lab 5.6 pres.res ## Candidate California Arkansas ## 1 Clinton 8753788/14181595 380494/1130676 ## 2 Trump 4483810/14181595 684872/1130676 ## 3 Other 943997/14181595 65310/1130676 pres.res2 &lt;- pivot_longer(pres.res, c(&quot;California&quot;, &quot;Arkansas&quot;), names_to = &quot;State&quot;, values_to = &quot;Proportion&quot;) pres.res2 ## # A tibble: 6 × 3 ## Candidate State Proportion ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Clinton California 8753788/14181595 ## 2 Clinton Arkansas 380494/1130676 ## 3 Trump California 4483810/14181595 ## 4 Trump Arkansas 684872/1130676 ## 5 Other California 943997/14181595 ## 6 Other Arkansas 65310/1130676 pres.res3 &lt;- separate(pres.res2, &quot;Proportion&quot;, c(&quot;Votes&quot;, &quot;Total&quot;)) pres.res3 ## # A tibble: 6 × 4 ## Candidate State Votes Total ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Clinton California 8753788 14181595 ## 2 Clinton Arkansas 380494 1130676 ## 3 Trump California 4483810 14181595 ## 4 Trump Arkansas 684872 1130676 ## 5 Other California 943997 14181595 ## 6 Other Arkansas 65310 1130676 pres.res4 &lt;- mutate(pres.res3, Votes = as.numeric(Votes), Total = as.numeric(Total)) str(pres.res4) ## tibble [6 × 4] (S3: tbl_df/tbl/data.frame) ## $ Candidate: chr [1:6] &quot;Clinton&quot; &quot;Clinton&quot; &quot;Trump&quot; &quot;Trump&quot; ... ## $ State : chr [1:6] &quot;California&quot; &quot;Arkansas&quot; &quot;California&quot; &quot;Arkansas&quot; ... ## $ Votes : num [1:6] 8753788 380494 4483810 684872 943997 ... ## $ Total : num [1:6] 14181595 1130676 14181595 1130676 14181595 ... pres.res5 &lt;- pres.res4 |&gt; group_by(Candidate) |&gt; summarise(Percent = sum(Votes)/sum(Total)*100) |&gt; arrange(desc(Percent)) pres.res5 ## # A tibble: 3 × 2 ## Candidate Percent ## &lt;chr&gt; &lt;dbl&gt; ## 1 Clinton 59.7 ## 2 Trump 33.8 ## 3 Other 6.59 Other useful tidyr functions separate() - splits one column of strings into multiple new columns unite() - combines many columns into one (as a string) extract() - uses regular expressions to pull out specific information from a string column Example fball ## home away score ## 1 Man U Shef Wed 2-1 ## 2 Tottenham Arsenal 0-0 ## 3 Chelsea W Ham 1-0 separate(fball, &quot;score&quot;, c(&quot;home_goals&quot;, &quot;away_goals&quot;)) ## home away home_goals away_goals ## 1 Man U Shef Wed 2 1 ## 2 Tottenham Arsenal 0 0 ## 3 Chelsea W Ham 1 0 5.1.2 Data Manipulation (dplyr) Main dplyr functions (First argument is always the data frame) filter() - Focus on a subset of rows Other Arguments condition to filter by For example, filter(who, year == 1999) (see above list of logical operators) arrange() - Reorder the rows Other Arguments Variable names to sort by, sub-sorting by later variables Wrap variable name in desc() to sort descending (ascending by default) For example, arrange(who, year, desc(country)) select() - Focus on a subset of variables (columns) Other Arguments Name of variables to retain For example, select(who, year, cases) mutate() - Create new derived variables Other Arguments Name of new variable and equation defining it For example, mutate(who, rate = cases/population) group_by() - Splits a data frame up into groups according to one variable Other Arguments Name of variable to group by For example, group_by(who, country) summarise() - Create summary statistics (collapsing many rows) by groupings Other Arguments Function to summarise by For example, summarise(who, total = sum(cases)) Note: often want to summarise by group For example, who2 &lt;- group_by(who, country) summarise(who2, total = sum(cases), change = max(cases)-min(cases)) 5.1.3 Pipelines Chain functions (not limited to tidyverse functions) where result of first function is first entry in second function and so on. Example, filter(x, ...) |&gt; select(...) |&gt; mutate(...) |&gt; group_by(...) |&gt; arrange(...) Pipeline Operator: CMD-SHIFT-M 5.1.4 Joining Data Frames in Tidyverse Simplest case of joining data frames (more details in data frames section): rbind() - paste rows together (above/below) cbind() - paste cols together (left/right) These methods can be very error prone (requires variables/observations in identical order etc) Advanced Data Frame Joins left_join(x, y) - add new variables from y to x, keeping all x obs right_join(x, y) - add new variables from x to y, keeping all y obs inner_join(x, y) - keep only matching rows full_join(x, y) - keep all rows in both x and y Example band_members ## # A tibble: 3 × 2 ## name band ## &lt;chr&gt; &lt;chr&gt; ## 1 Mick Stones ## 2 John Beatles ## 3 Paul Beatles band_instruments2 ## # A tibble: 3 × 2 ## artist plays ## &lt;chr&gt; &lt;chr&gt; ## 1 John guitar ## 2 Paul bass ## 3 Keith guitar left_join(band_members, band_instruments2, by = c(&quot;name&quot; = &quot;artist&quot;)) ## # A tibble: 3 × 3 ## name band plays ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Mick Stones &lt;NA&gt; ## 2 John Beatles guitar ## 3 Paul Beatles bass 5.2 Dynamic Documents and Interactive Dashboards 5.2.1 RMD Document Preamble --- title: &quot;Example&quot; author: &quot;(optional) Jamie Reason&quot; date: &quot;(optional)&quot; output: html_document: default pdf_document: default --- Course Slides on RMD For further formatting, refer to RMD Cheat Sheet 5.2.2 Shiny Resource: Mastering Shiny Book Outline UI Server R code can be added to any part of a shiny document but only the code in the server will be updated when needed. Starting a Shiny Dashboard (create a new shiny app in R studio): fluidpage() is just the most common but there are alternatives library(shiny) #misc code ui &lt;- fluidpage( ... ) server &lt;- function(input, output, session){ #server code } shinyApp(ui, server) 5.2.2.1 UI UI elements reference guide 5.2.2.1.1 Pages Examples ui &lt;- fluidPage( &quot;One&quot;, &quot;Two&quot;, &quot;Three&quot; ) shinyApp(ui, server = function(input, output, session) {}) ui &lt;- navbarPage( &quot;Title of page&quot;, tabPanel(&quot;My first tab&quot;, &quot;Hello Alice&quot;), tabPanel(&quot;My second tab&quot;, &quot;Hello Bob&quot;) ) shinyApp(ui, server = function(input, output, session) {}) Other pages: fixedPage(), fillPage(), … 5.2.2.1.2 Layouts and Panels Goes inside of the page titlePanel(\"My App\") sidebarLayout() first argument sidebarPanel() second argument mainPanel() fluidrow() - creates a new row with columns in ```column() calls first a number 1 to 12 (all columns numbers must sum to 12) for width -other arguments are outputs Examples ui &lt;- fluidPage( titlePanel(&quot;My App&quot;), sidebarLayout( sidebarPanel(&quot;I&#39;m in sidebar&quot;), mainPanel(&quot;I&#39;m in main panel&quot;) ) ) shinyApp(ui, server = function(input, output, session) {}) ui &lt;- fluidPage( fluidRow( column(4, &quot;Lorem ipsum dolor ...&quot;), column(8, &quot;Lorem ipsum dolor ...&quot;) ), fluidRow( column(6, &quot;Lorem ipsum dolor ...&quot;), column(6, &quot;Lorem ipsum dolor ...&quot;) ) ) shinyApp(ui, server = function(input, output, session) {}) 5.2.2.1.3 UI Inputs All inputs take same first argument - inputId, the unique identifier of the input. This can be accessed by using input$name (in the server). The second argument is a label, or how it’s name appears on the dashboard. Text Inputs textInput() passwordInput() textAreaInput() Numeric Inputs numericInput() sliderInput() Categoric Inputs selectInput() radioButtons() checkboxGroupInput() Examples ui &lt;- fluidPage( numericInput(&quot;num&quot;, &quot;Number one&quot;, value = 0, min = 0, max = 100), sliderInput(&quot;num2&quot;, &quot;Number two&quot;, value = 50, min = 0, max = 100), sliderInput(&quot;rng&quot;, &quot;Range&quot;, value = c(10, 20), min = 0, max = 100) ) shinyApp(ui, server = function(input, output, session) {}) animals &lt;- c(&quot;dog&quot;, &quot;cat&quot;, &quot;mouse&quot;, &quot;bird&quot;, &quot;other&quot;, &quot;I hate animals&quot;) ui &lt;- fluidPage( selectInput(&quot;state&quot;, &quot;What&#39;s your favourite state?&quot;, state.name), radioButtons(&quot;animal&quot;, &quot;What&#39;s your favourite animal?&quot;, animals), checkboxGroupInput(&quot;animal2&quot;, &quot;What animals do you like?&quot;, animals) ) shinyApp(ui, server = function(input, output, session) {}) 5.2.2.2 Server and UI Outputs All outputs take same first argument, outputId and an output can be called by output$name. 5.2.2.2.1 UI Outputs Text Outputs textOutput() renderText() verbatimTextOutput() renderPrint() Plot Outputs plotOutput() and renderPlot() width argument res = 96 argument closest to what you see inj RStudio Examples ui &lt;- fluidPage( textInput(&quot;name&quot;, &quot;What&#39;s your name?&quot;), textOutput(&quot;greet&quot;) ) server &lt;- function(input, output, session) { output$greet &lt;- renderText({ if(nchar(input$name) &gt; 0) { return(paste0(&quot;Hello &quot;, input$name)) } else { return(&quot;Hello friend, tell me your name!&quot;) } }) } shinyApp(ui, server) ui &lt;- fluidPage( plotOutput(&quot;myplot&quot;, width = &quot;400px&quot;) ) server &lt;- function(input, output, session) { output$myplot &lt;- renderPlot({ plot(iris$Sepal.Length, iris$Sepal.Width) }, res = 96) } shinyApp(ui, server) 5.2.2.2.2 Variables outside outputs (reactive) Instead of making variables in the server (which you can’t do as they wouldn’t be reactive), you use the reactive({}) call: Inside the server, name &lt;- ... becomes, name &lt;- reactive({ ... }) And when name is used it should be called as name() Examples server &lt;- function(input, output, session) { name &lt;- reactive({ toupper(input$name) }) output$greet &lt;- renderText({ if(nchar(input$name) &gt; 0) { return(paste0(&quot;Hello &quot;, name(), &quot;, here is your plot ...&quot;)) } else { return(&quot;Hello friend, tell me your name!&quot;) } }) output$myplot &lt;- renderPlot({ if(nchar(input$name) &gt; 0) { ggplot(iris, aes_string(x = input$xvar, y = input$yvar)) + geom_point() + labs(title = paste0(name(), &quot;&#39;s plot!&quot;)) } }, res = 96) } 5.2.2.3 Full Example From exercise 5.78 (Lab 8) library(&quot;shiny&quot;) library(&quot;ukpolice&quot;) library(&quot;tidyverse&quot;) library(&quot;leaflet&quot;) nbd &lt;- ukc_neighbourhoods(&quot;durham&quot;) nbd2 &lt;- nbd$id names(nbd2) &lt;- nbd$name # Define UI for application ui &lt;- fluidPage( titlePanel(&quot;UK Police Data&quot;), sidebarLayout( sidebarPanel( selectInput(&quot;nbd&quot;, &quot;Choose Durham Constabulary Neighborhood&quot;, nbd2), textInput(&quot;date&quot;, &quot;Enter the desired year and month in the format YYYY-MM&quot;, value = &quot;2021-09&quot;) ), # Show a plot of the generated distribution mainPanel( plotOutput(&quot;barchart&quot;), leafletOutput(&quot;map&quot;) ) ) ) # Define server logic server &lt;- function(input, output) { # Get boundaries for selected neighbourhood # Wrapped in a reactive because we need this to trigger a # change when the input neighborhood changes bdy &lt;- reactive({ bdy &lt;- ukc_neighbourhood_boundary(&quot;durham&quot;, input$nbd) bdy |&gt; mutate(latitude = as.numeric(latitude), longitude = as.numeric(longitude)) }) # Get crimes for selected neighbourhood # Also wrapped in a reactive because we need this to trigger a # change when the boundary above, or date, changes crimes &lt;- reactive({ bdy2 &lt;- bdy() |&gt; select(lat = latitude, lng = longitude) ukc_crime_poly(bdy2[round(seq(1, nrow(bdy2), length.out = 100)), ], input$date) }) # First do plot output$barchart &lt;- renderPlot({ ggplot(crimes()) + geom_bar(aes(y = category, fill = outcome_status_category)) + labs(y = &quot;Crime&quot;, fill = &quot;Outcome Status&quot;) }, res = 96) # Then do map output$map &lt;- renderLeaflet({ leaflet() |&gt; addTiles() |&gt; addPolygons(lng = bdy()$longitude, lat = bdy()$latitude) |&gt; addCircles(lng = as.numeric(crimes()$longitude), lat = as.numeric(crimes()$latitude), label = crimes()$category, color = &quot;red&quot;) }) } # Run the application 5.3 Dates (see DSSC Lab 9) Use lubridates package library(&quot;lubridate&quot;) ## Warning: package &#39;lubridate&#39; was built under R version 4.1.2 ## Loading required package: timechange ## Warning: package &#39;timechange&#39; was built under R version 4.1.2 ## ## Attaching package: &#39;lubridate&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## date, intersect, setdiff, union lubridate.tidyverse.org ###Creating Dates {-} Current date and time today() ## [1] &quot;2022-11-23&quot; now() ## [1] &quot;2022-11-23 14:16:25 GMT&quot; str(today()) #these are dates not strings ## Date[1:1], format: &quot;2022-11-23&quot; Constructing dates from strings and numbers ymd(&quot;2021-12-02&quot;) ## [1] &quot;2021-12-02&quot; mdy(&quot;December 2nd, 2021&quot;) ## [1] &quot;2021-12-02&quot; ymd(20211202) ## [1] &quot;2021-12-02&quot; ymd_hms(&quot;2021-12-02 12:33:59&quot;) ## [1] &quot;2021-12-02 12:33:59 UTC&quot; Constructing dates and times from individual components make_date(2021, 12, 2) ## [1] &quot;2021-12-02&quot; make_date(&quot;2021&quot;, &quot;12&quot;, &quot;2&quot;) ## [1] &quot;2021-12-02&quot; make_datetime(2021, 12, 2, 12) ## [1] &quot;2021-12-02 12:00:00 UTC&quot; make_datetime(2021, 12, 2, 12, 33, 59) ## [1] &quot;2021-12-02 12:33:59 UTC&quot; 5.3.1 Time Zones Date creation functions take an argument tz = \"America/New_York\". now(tz = &quot;America/New_York&quot;) ## [1] &quot;2022-11-23 09:16:25 EST&quot; To see all avaliable zones call OlsonNames() Changing Time Zone #forces change of time zone without changing date/time x &lt;- ymd_hm(&quot;2019-12-02 15:10&quot;) force_tz(x, &quot;America/New_York&quot;) ## [1] &quot;2019-12-02 15:10:00 EST&quot; #converts date/tine to a new time zone with_tz(x, &quot;America/New_York&quot;) ## [1] &quot;2019-12-02 10:10:00 EST&quot; 5.3.2 Extracting From Dates datetime &lt;- today() year(datetime) ## [1] 2022 yday(datetime) ## [1] 327 wday(datetime, week_start = 1) #by default, sunday is first day of week, use this to make it monday ## [1] 3 month(datetime, label = TRUE) ## [1] Nov ## 12 Levels: Jan &lt; Feb &lt; Mar &lt; Apr &lt; May &lt; Jun &lt; Jul &lt; Aug &lt; Sep &lt; ... &lt; Dec Rounding Dates/Times floor_date(datetime, unit = &quot;minute&quot;) ## [1] &quot;2022-11-23 UTC&quot; ceiling_date(datetime, unit = &quot;week&quot;) ## [1] &quot;2022-11-27&quot; ceiling_date(datetime, unit = &quot;quarter&quot;) ## [1] &quot;2023-01-01&quot; floor_date(datetime, unit = &quot;week&quot;, week_start = 1) ## [1] &quot;2022-11-21&quot; 5.3.3 Misc Updating Dates/Times datetime &lt;- ymd_hms(&quot;2021-12-02 12:33:59&quot;) datetime &lt;- update(datetime, hour = 11, second = 33) datetime ## [1] &quot;2021-12-02 11:33:33 UTC&quot; #Alternatively, datetime &lt;- ymd_hms(&quot;2021-12-02 12:33:59&quot;) hour(datetime) &lt;- 11 second(datetime) &lt;- 33 datetime ## [1] &quot;2021-12-02 11:33:33 UTC&quot; Durations Can do arithmetic with dates and times einstein &lt;- dmy(&quot;14th March 1879&quot;) age &lt;- today() - months(42) - einstein #age 42 months ago age ## Time difference of 51204 days Get a duration after arithmetic using as.duration() as.duration(age) ## [1] &quot;4424025600s (~140.19 years)&quot; 5.4 Strings and Regular Expressions 5.4.1 Strange characters When you want a string with strange characters, enclose it in r\"(...)\" instead of just \"...\". z &lt;- r&quot;(As Roosevelt said, &quot;Believe you can and you&#39;re halfway there.&quot; )&quot; cat(z) ## As Roosevelt said, ## &quot;Believe you can and you&#39;re halfway there.&quot; cat() is like a print command 5.4.2 stringr (part of tidyverse) Most stringr functions begin with str_ so can use autocomplete for many string operations. Basics String Length str_length(c(&quot;Data Science and Statistical Computing&quot;, &quot;by&quot;, &quot;Dr Louis Aslett&quot;)) ## [1] 38 2 15 Combining Strings str_c(&quot;Data Science and Statistical Computing&quot;, &quot;by&quot;, &quot;Dr Louis Aslett&quot;) ## [1] &quot;Data Science and Statistical ComputingbyDr Louis Aslett&quot; str_c(&quot;Data Science and Statistical Computing&quot;, &quot;by&quot;, &quot;Dr Louis Aslett&quot;, sep = &quot; &quot;) ## [1] &quot;Data Science and Statistical Computing by Dr Louis Aslett&quot; str_c(c(&quot;Data Science and Statistical Computing&quot;, &quot;by&quot;, &quot;Dr Louis Aslett&quot;)) ## [1] &quot;Data Science and Statistical Computing&quot; ## [2] &quot;by&quot; ## [3] &quot;Dr Louis Aslett&quot; str_c(c(&quot;Data Science and Statistical Computing&quot;, &quot;by&quot;, &quot;Dr Louis Aslett&quot;), collapse = &quot; &quot;) ## [1] &quot;Data Science and Statistical Computing by Dr Louis Aslett&quot; Subsetting Strings z &lt;- c(&quot;Alice&quot;, &quot;Bob&quot;, &quot;Connie&quot;, &quot;David&quot;) str_sub(z, 1, 4) ## [1] &quot;Alic&quot; &quot;Bob&quot; &quot;Conn&quot; &quot;Davi&quot; str_sub(z, 1, 2) &lt;- &quot;Zo&quot; z ## [1] &quot;Zoice&quot; &quot;Zob&quot; &quot;Zonnie&quot; &quot;Zovid&quot; Trimming str_trim(&quot; String with trailing, middle, and leading white space\\n\\n&quot;) ## [1] &quot;String with trailing, middle, and leading white space&quot; str_squish(&quot; String with trailing, middle, and leading white space\\n\\n&quot;) ## [1] &quot;String with trailing, middle, and leading white space&quot; 5.4.2.1 Regex’s See all details in docs or lecture slides Regex’s are used for finding patterns in strings str_view() Identify a pattern in a string: Exact matching str_view(&quot;string to find pattern in&quot;, &quot;pattern&quot;) Wildcard matching x &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;) str_view(x, &quot;.a.&quot;) How to match a .? - str_view(c(\".bc\", \"a.c\", \"be.\"), \"a\\\\.c\") (use \\ but make sure to escape it) Anchoring To start: str_view(x, &quot;^a&quot;) To end: str_view(x, &quot;a$&quot;) can also anchor to both. Matching Set of Characters I Find exactly first character that matches: str_view(x, &quot;[pan]&quot;) Find one or more instance consecutively: str_view(x, &quot;[pan]+&quot;) Find exact number of instances occurring consecutively: str_view(x, &quot;[pan]{2}&quot;) Find a range or instances occurring consecutively: str_view(x, &quot;[pan]{1,3}&quot;) Matching Set of Characters II y &lt;- c(&quot;There were 122 in total&quot;, &quot;Overall about 390 found&quot;, &quot;100 but no more&quot;) str_view(y, &quot;[0-9]+&quot;) str_view(y, &quot;[^A-Za-z ]+&quot;) #^ anchor inside so acts as a negation str_view(y, &quot;^[0-9]+&quot;) #^ anchor on outside str_view(y, &quot;[a-z ]+&quot;) 5.5 Probability Distributions Letter Function Use “d” dnorm() evaluates pdf \\(f(x)\\) “p” pnorm() evaluates cdf \\(F(x)\\) “q” qnorm() evaluates inverse cdf \\(F^{-1}(q)\\) i.e. \\(P(X \\leq x) = q\\) “r” rnorm() generates random numbers Parameters will vary, e.g. Normal distribution: dnorm, pnorm, qnorm, rnorm. Parameters: mean (\\(\\mu\\)) and sd (\\(\\sigma\\)). t distribution: dt, pt, qt, rt. Parameter: df \\(\\chi^2\\) distribution: dchisq, pchisq, qchisq, rchisq. Parameter: df 5.5.1 DSSC Theory Applications 5.5.1.1 Monte Carlo Hyothesis Test Example 2.1 # Specify test statistic and null value x.bar &lt;- 8.6 n &lt;- 6 mu0 &lt;- 9.2 # Simulate lots of data assuming the null is true t &lt;- rep(0, 50000) for(j in 0:50000) { z &lt;- rnorm(n, mu0, sqrt(0.4)) #random sample (of n=6) generated under H0 t[j] &lt;- abs(mean(z)-mu0) #difference in mean of random sample and mean under H0 assumption } # Calculate empirical p-value sum(t &gt; abs(x.bar-mu0)) / 50000 #number of random samplea that were at least as far from mu0 as observation 5.5.1.2 Boot Strap Set-up Sample of size \\(n\\) independent samples There is a statistic \\(S( \\cdot )\\) we wish to estimate We also want the standard error of this General Method: Draw \\(B\\) new samples of size \\(n\\) with replacement from \\(\\mathbf{x} = (x_1, \\ldots , x_n)\\) Call these samples \\(\\textbf{x}^{\\star 1}, \\ldots , \\textbf{x}^{\\star B}\\) Calculate the estimate, \\(\\bar{S}^{\\star}=\\frac{1}{B} \\sum_{b=1}^{B} S\\left(\\mathbf{x}^{\\star b}\\right)\\) Calculate the variance, \\(\\widehat{\\operatorname{Var}}(S(\\mathbf{x}))=\\frac{1}{B-1} \\sum_{b=1}^{B}\\left(S\\left(\\mathbf{x}^{\\star b}\\right)-\\bar{S}^{\\star}\\right)^{2}\\) Example 3.1 (Also see 3.5) # Mouse data x &lt;- c(94,197,16,38,99,141,23) # Number of bootstraps B &lt;- 1000 # Statistic S &lt;- mean # Perform bootstrap S.star &lt;- rep(0, B) for(b in 1:B) { x.star &lt;- sample(x, replace = TRUE) S.star[b] &lt;- S(x.star) } # Bootstrap estimate mean(S.star) # Standard error of estimate sd(S.star) Empirical CDF - ecdf(x) "]]
