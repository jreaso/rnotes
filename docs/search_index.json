[["index.html", "R Notes Resources", " R Notes Jamie Reason 2022-23 Resources These are personal notes on R written for MLNN (2022-23) and DSSC (2021-22) courses. R Seek Search Engine Cheat Sheets MLNN Course Notes DSSC Course Notes "],["r-basics.html", "Chapter 1 R Basics 1.1 Misc. 1.2 Vectors 1.3 Lists 1.4 Data Types", " Chapter 1 R Basics 1.1 Misc. 1.1.1 Packages Installing a package: install.packages(\"dplyr\") Loading a package: library(\"dplyr\") 1.1.2 Loops for(i in x) { #i iterates over the values in vector x } You cannot modify the vector x from within the loop. 1.1.3 Functions myFunction &lt;- function(arg1, arg2 = 1) { ... return(...) } To apply a function to a vector, use sapply(X, Fun) and Fun will be applied to X element-wise 1.1.4 Logical Operators Logical operators act element-wise on pairs of vectors (of same size) of TRUE and FALSE values. AND is &amp;, OR is |. 1.2 Vectors 1.2.1 Creating Vectors # basic vector v &lt;- c(2,3,8,5) #repeated values rep(c(1,2),5) #sequence seq(4,7) #inclusive, and by default counts by 1 #shorthand 4:7 #custom length or increments seq(0, 10, by = 2) seq(0, 3, length.out = 7) 1.2.2 Accessing Vectors myData &lt;- c(2,3,8,5) #element wise myData[2] #selects second entry myData[-3] #excludes third element #can also pass in vectors to index it myData[c(1,4)] myData[2:4] 1.2.3 Vector Functions Essential Functions mean() sd() var() max() min() median() range() quantile() cumsum() sum() Other Functions sort() - sorts a vector (alphabetically or by increasing size when numerical) rank() - provides the rank of each element order() - gives the indices of the elements in order unique() - returns just the unique values in the vector length() - total number of elements in the vector paste() - makes each element in the vector a string Particularly Interesting Functions sample() - randomly sample from the elements of a vector sample(c(3,7,9,23,45), 3, replace = FALSE) #sample from vector, choosing n=3 without replacement table() - provide counts of the occurrence of each element table(sample(1:6, 200, replace = TRUE)) is.na() - gives a TRUE/FALSE vector as the output checking is an entry is NA 1.3 Lists x &lt;- list(1, &quot;a&quot;, c(1,2,3), data.frame(a = 1:3, b = 4:6)) can have a list of any type of variable can be good for hierarchical and tree structures, Nesting is permitted (i.e. lists can contain lists) variables in the list can also be named x &lt;- list(bob = 1, jill = &quot;a&quot;, jack = c(1,2,3), eve = data.frame(a = 1:3, b = 4:6)) x$eve$a ## [1] 1 2 3 1.3.1 Accessing lists x[] #accesses an element of a list (returns a list of one element) x[[]] #strips away one level of hierarchy, list structure is gone x$bob #equivalent to above when items in list are named 1.4 Data Types Numeric Logical (TRUE/FALSE) Categorical (called factors in R), could be ordered (e.g. credit rating) or could not be (e.g. eye colour) Date/Time Text or String Others (e.g. image, spatial, audio, video) 1.4.1 Categorical Data (Factors) 1.4.1.1 Making Data Frames Categorical R cannot tell the difference between factors and strings when importing data frames, so we must “tidy” them up after importing Cleaning up a data frame (all non-numeric by default get imported as strings) by making all strings in one variable a factor eyesDF &lt;- data.frame( name=c(&quot;anne&quot;,&quot;john&quot;,&quot;charlie&quot;,&quot;sarah&quot;,&quot;max&quot;,&quot;ellie&quot;,&quot;eve&quot;), eyeColour=c(&quot;blue&quot;,&quot;green&quot;,&quot;brown&quot;,&quot;brown&quot;,&quot;blue&quot;,&quot;blue&quot;,&quot;brown&quot;)) #changes a variable to be categorical (a factor) eyesDF$eyeColour &lt;- as.factor(eyesDF$eyeColour) summary(eyesDF$eyeColour) ## blue brown green ## 3 3 1 Treat data as a factor or a text? Treat as text not factor when every observation is unique (e.g. surname) When some text is coming up very often it may be more appropriate as a factor 1.4.1.2 Making Vectors Categorical We can create a vector with factors in by creating the entries as strings and then applying the factor() function For example, eye.colour &lt;- factor(c(&quot;blue&quot;,&quot;brown&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;blue&quot;,&quot;brown&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;green&quot;,&quot;blue&quot;,&quot;blue&quot;,&quot;brown&quot;,&quot;green&quot;,&quot;brown&quot;,&quot;brown&quot;,&quot;green&quot;)) summary(eye.colour) ## blue brown green ## 8 5 6 Example Using Factors The following data frame has a factor variable (feed) data(&quot;chickwts&quot;) head(chickwts) ## weight feed ## 1 179 horsebean ## 2 160 horsebean ## 3 136 horsebean ## 4 227 horsebean ## 5 217 horsebean ## 6 168 horsebean summary(chickwts) ## weight feed ## Min. :108.0 casein :12 ## 1st Qu.:204.5 horsebean:10 ## Median :258.0 linseed :12 ## Mean :261.3 meatmeal :11 ## 3rd Qu.:323.5 soybean :14 ## Max. :423.0 sunflower:12 We can filter out specific factors, chickwts[chickwts$feed %in% c(&quot;sunflower&quot;,&quot;linseed&quot;),] Number of levels (different factors) and names of levels nlevels(chickwts$feed) ## [1] 6 levels(chickwts$feed) ## [1] &quot;casein&quot; &quot;horsebean&quot; &quot;linseed&quot; &quot;meatmeal&quot; &quot;soybean&quot; &quot;sunflower&quot; unclass() gives each entry a number corresponding to a factor unclass(chickwts$feed) ## [1] 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 ## [39] 6 6 6 6 6 6 6 6 6 6 4 4 4 4 4 4 4 4 4 4 4 1 1 1 1 1 1 1 1 1 1 1 1 ## attr(,&quot;levels&quot;) ## [1] &quot;casein&quot; &quot;horsebean&quot; &quot;linseed&quot; &quot;meatmeal&quot; &quot;soybean&quot; &quot;sunflower&quot; "],["data-frames.html", "Chapter 2 Data Frames 2.1 Creating Data Frames 2.2 Accessing Data Frames 2.3 Interrogating Data Frames 2.4 Manipulating Data Frames 2.5 Missing Data", " Chapter 2 Data Frames A dataframe is a large “design matrix” as called in stats, and in general: rows: contain observation columns: contain variables Structure and viewing data frames To show a structure of a variable, dataframe, list etc, run str(x). View(mydata) to see in spreadsheet view 2.1 Creating Data Frames Manually hw &lt;- data.frame(Height = c(147, 150, 152), Weight = c(52.2, 53.1, 54.4)) Load from *.csv file If in working directory, hw &lt;- read.csv(&quot;hw.csv&quot;) Can also use RStudio “Import Dataset” button in Environment tab (top left) Built in Data Sets Can use data frames built into R, for example: data(&quot;cars&quot;) Run data() to see all data sets 2.2 Accessing Data Frames Single column (alternative ways): will collapse Data Frame column into vector hw$Height hw[,1] keeps data frame structure only keeping 1 column hw[,1, drop = FALSE] Single element: hw$Height[3] or hw[3,1] Single row: hw[3,] (similar to single column) Full access df[ r , c ] r can be empty, integer between 1 and number of row, vector of integers or a vector of TRUE/FALSE of length num rows (must be exact length). c can be empty, integer between 1 and number of row, vector of integers, a vector of TRUE/FALSE of length num rows (must be exact length) or vector of strings with column/variable names. Examples (first 3 equivalent) wq.red$ph wq.red[, 9] wq.red[, &quot;pH&quot;] wq.red[, c(9,11)] wq.red[, c(&quot;pH&quot;,&quot;alcohol&quot;)] 2.2.1 Advanced Query - Accessing a Subset of a Data Frame Examples Entire column “Weight” with values &gt;50 hw[hw$Weight&gt;50,] Both columns, 4 random rows (using sample()) hw[sample(1:nrow(hw), 4),] -Removing NA values movies[!is.na(movies$budget),] #doesn&#39;t have any NA value Note: ! is the logical NOT operator and is.na() is a function that acts on a vector giving a TRUE/FALSE vector as the output extra example wq.red[wq.red$pH&gt;3 &amp; wq.red$density&lt;1, &quot;alcohol&quot;] #wq.red$pH&gt;3 is a vector of TRUE/FALSE #wq.red$density&lt;3 is a vector of TRUE/FALSE #&amp; takes logical between two vectors 2.3 Interrogating Data Frames Data Frame Functions - information names() - column names dim() - number of rows and columns nrow() - number of rows ncol() - number of columns head() - useful for large data, just shows top rows (can add extra parameter to specify how many rows show up) str() - shows details about type of data Data Frame Functions - interesting data colMeans() rowMeans() colSums() rowSums() cov() - covariance matrix cor() - correlation matrix scale() - scales data to be centered at 0 and scaled (both have optional arguments available) summary() - gives all major statistics for each variable (column) Data Frame (column/row) Functions - sorting and ordering (optional decreasing = TRUE argument) `sort(my.data$var) - sorts a variable but only outputs that column vector sorted `order(my.data$var) - outputs a list of indices sorted Sorting a Data Frame by a Column my.data[order(my.data$var),] - sorts whole data frame according to var column 2.4 Manipulating Data Frames Creating/Adding Variables to a Data Frame Reference a variable that doesn’t exist and just assign it to something. For example, hw$BMI &lt;- hw$Weight/(hw$Height/100)^2 2.4.1 Merging Data Frames rbind(,) and cbind(,) Note: can be very error prone and often better to use tidyverse (unless with rbind variables are identical and in same order or with cbind, observations are in same order) rbind() pastes rows together (above/below) cbind() pastes columns together (left/right) For an example with rbind(,), if two data frames have same column names, rbind(,) will stack the rows to make one data frame. As an example, test1 &lt;- data.frame(Col1 = c(1,5,9,2), Col2 = c(6,9,8,3)) test2 &lt;- data.frame(Col2 = c(5,9,0,1), Col1 = c(4,9,3,0)) rbind(test1, test2) ## Col1 Col2 ## 1 1 6 ## 2 5 9 ## 3 9 8 ## 4 2 3 ## 5 4 5 ## 6 9 9 ## 7 3 0 ## 8 0 1 (notice how the columns were matched by name not order) 2.5 Missing Data 2.5.1 Importing Data with Missing Values When using read.csv(\"mydata.csv\"), can add the additional argument na.strings=c(...) to set any strings in the vector to be replaced by &lt;NA&gt;. As an example, read.csv(&quot;carsdata.csv&quot;, na.strings = c(&quot;&quot;, &quot;na&quot;)) would import the cardata.csv file as a data frame with all strings that are empty \"\" or \"na\" with the approptiate &lt;NA&gt; tag. Ignoring NA values - na.rm = TRUE na.rm = TRUE argument ignores all &lt;NA&gt; values when performing the function. As an example, mean(mydata$var, na.rm = TRUE) which is equivalent to mean(na.omit(mydata$var)) 2.5.2 Remove Ovservations with &lt;NA&gt; Entry (na.omit()) Example, na.omit(chickwts$weight) "],["plotting.html", "Chapter 3 Plotting 3.1 Plotting in Base R 3.2 Plotting in ggplot2", " Chapter 3 Plotting 3.1 Plotting in Base R (useful for exploration of data) 3.1.1 Core Plot Function Plots data x against data y. (if only x is supplied, the indices will be plotted against their values) plot(x,y, ...) Optional Arguments col - colour of points (can use RGB or colour name as a string; can be vector for each point) pch - plotting symbol (cross, circle etc), an integer Plotting symbol reference xlab and ylab - labels xlim and ylim - limits in the form of a 2-vector (e.g. xlim = c(20,100) restricts x from 20 to 100) main - Plot Title type \"p\" - points (default) \"l\" - line connecting observations \"b\" - both points and lines 3.1.2 Other Plot Functions hist() - Histogram boxplot() - Boxplot barplot() - Categorical Bar Charts (use table to get summary) Note: you can store plots inside of variables data(&quot;diamonds&quot;, package = &quot;ggplot2&quot;) hgram &lt;- hist(diamonds$price, freq = FALSE) str(hgram) ## List of 6 ## $ breaks : num [1:20] 0 1000 2000 3000 4000 5000 6000 7000 8000 9000 ... ## $ counts : int [1:19] 14524 9683 6129 4225 4665 3163 2278 1668 1307 1076 ... ## $ density : num [1:19] 2.69e-04 1.80e-04 1.14e-04 7.83e-05 8.65e-05 ... ## $ mids : num [1:19] 500 1500 2500 3500 4500 5500 6500 7500 8500 9500 ... ## $ xname : chr &quot;diamonds$price&quot; ## $ equidist: logi TRUE ## - attr(*, &quot;class&quot;)= chr &quot;histogram&quot; 3.1.3 Adding to Plots Each plot() function creates a new plot. To add to an existing plot use, points() - adds a plot of points to an existing plot lines() - shorthand for points(x, y, type=\"l\") abline() - adds a \\(y=mx+c\\) line directly 3.1.3.1 Fitting Lines to Plots (see linear regression) lm() - fits a straight line, pass inside of abline() lowess() - fits a smooth line, pass inside of lines() (f argument controls smoothness) density() - fits a smooth continuous version of a histogram Example data(&quot;diamonds&quot;, package = &quot;ggplot2&quot;) plot(diamonds$carat, diamonds$price, pch = 20) abline(lm(price ~ carat, diamonds), col = &quot;red&quot;) lines(lowess(diamonds$carat, diamonds$price, f = 0.05), col = &quot;green&quot;) hist(diamonds$price, freq = FALSE) lines(density(diamonds$price), col = &quot;red&quot;) 3.1.4 Multiple Plots (often better to just use ggplot2) To get a grid of all pairwise scatter plots, use pairs() pairs(mtcars) pairs(mtcars[,1:4]) You can also manually set the grid size (using par(mfrow = c(n,m))) and then populate each grid slot one by one by calling slots par(mfrow = c(2,1)) plot(diamonds$carat, diamonds$price) boxplot(diamonds$carat) par(mfrow = c(1,1)) # &lt;- need this to reset to a single plot! 3.2 Plotting in ggplot2 (useful for presentation of data) Loading ggplot2, # Either ... library(&quot;tidyverse&quot;) # for all tidyverse packages # OR, for just plotting library(&quot;ggplot2&quot;) 3.2.1 Main Structure Starting a plot Every plot starts with the function ggplot() with the optional arguments: data - to specify the data frame containing the variables we later reference aes() - mapping to specify what variables map to the x axis, y axis, colour legend, etc For example, ggplot(diamonds, aes(x = carat, y = price)) Axis are labelled and scaled but nothing is plotted yet (as we have not called a “Geom”). Geoms A geom_ will add a layer to the plot. Examples of Geoms: geom_point() - most basic, plots x against y as scatter plot geom_line() geom_smooth() - smoothed curve (defaukt method is “gam”, can also use “lm”) geom_bar() - barchart (1 variable and counts) geom_col() - barchart (2 variables) geom_boxplot() - boxplot More unusual ones, geom_hex() geom_polygon() aes() If you want to specify the x and y variables, colour by a property, group by a property, change the point size based on a property etc then you put that information into the aes(). The aes(...) that goes into the original ggplot(aes()) will be inherited by all plots unless overridden. The aes(...) that goes into a particular geom, geom_...(aes()) only applies to that geom. Labels xlab(\"X-axis Label\"), ylab(\"Y-axis Label\") and ggtitle(\"Title\") can also be added to the plot in the same way as Geoms. Alternativily, use + labs(title=\"Title\", x=\"X-axis\", y=\"Y-axis\") 3.2.2 Updating a Plot (Plots in Variables) data(&quot;mtcars&quot;) p &lt;- ggplot(mtcars, aes(x = hp, y = mpg)) + geom_point() p + geom_smooth() p + geom_smooth(method = &quot;lm&quot;) p + scale_y_log10() + scale_x_log10() + geom_smooth(method = &quot;lm&quot;) p + scale_y_log10() + scale_x_log10() + geom_smooth(method = &quot;lm&quot;) + geom_vline(xintercept = 100) Here, p stores the basic plot and each time, something different is added to it for a new plot, but without updating p. 3.2.3 Faceting Faceting enables splitting your data into multiple plots according to a categorical variable. facet_wrap() - a single variable split formula notation to indicate splitting variable ~ var optionally specify number of rows facet_grid() - two variable split formula indicating both splitting variables rows_var ~ cols_var formula indicating both splitting variables rows_var ~ cols_var For example, ggplot(mtcars, aes(x = hp, y = mpg)) + facet_wrap(~ gear) + geom_point() ggplot(mtcars, aes(x = hp, y = mpg)) + facet_grid(cyl ~ gear) + geom_point() 3.2.4 Examples ggplot(diamonds, aes(x = carat, y = price)) + geom_point(aes(colour = cut), size = 0.2) + geom_smooth(aes(colour = cut)) + xlab(&quot;Number of carats&quot;) + ylab(&quot;Price in $&quot;) ggplot(mpg, aes(x=displ, y=hwy)) + geom_point(aes(colour = class)) ggplot(mpg, aes(x=displ, y=hwy)) + facet_wrap(~class) + geom_point() + geom_point(aes(y=cty), colour=&quot;red&quot;) + #aes() doesn&#39;t hold all information!!! ylab(&quot;Fuel efficiency&quot;) ggplot(mpg, aes(x=displ, y=hwy)) + geom_point(aes(colour=drv)) + geom_smooth(colour=&quot;black&quot;) + geom_smooth(aes(colour=drv)) ggplot(mpg, aes(x=class)) + geom_bar(aes(fill=drv)) "]]
